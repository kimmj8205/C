#include <stdio.h>
#include <stdlib.h>

typedef struct TreeNode {
 	int data;
 	struct TreeNode *left, *right;
} TreeNode;

void insert_node(TreeNode **root, int key) {
	TreeNode *p, *t;
    TreeNode *n;
    t = *root;
    p = NULL;
    while (t!=NULL){
        if(key == t->data) return;
        p = t;
        if(key < t->data) t=p->left;
        else t = p->right;
    }
    n = (TreeNode *)malloc(sizeof(TreeNode));
    if(n == NULL) return;
    n->data = key;
    n->left = n->right = NULL;
    if(p!=NULL)
        if(key<p->data)
            p->left = n;
    	else p->right = n;
    else *root = n;
    return ;
}
void delete_node(TreeNode **root, int key) {
    
    TreeNode *p, *child, *succ, *succ_p, *t;
	p = NULL;
	t = *root;
	while( t != NULL && t->data != key ){
		p = t;
		t = ( key < p->data ) ? p->left : p->right;
	}
	if( t == NULL ) {
		printf("key is not in the tree\n");
		return;
	}
    if( (t->left==NULL) && (t->right==NULL) ){
		if( p != NULL ){
			if( p->left == t )
				p->left = NULL;
			else p->right = NULL;
		}
		else 
			*root = NULL;
	}
    else if((t->left==NULL)||(t->right==NULL)){
		child = (t->left != NULL) ? t->left : t->right;
		if( p != NULL ){
			if( p->left == t ) 
				p->left = child;
			else p->right = child;
		}
		else 
			*root = child;
	}
    else{
		succ_p = t;
		succ = t->right;
		while(succ->left != NULL){
			succ_p = succ;
			succ = succ->left;
		}
		if( succ_p->left == succ )
			succ_p->left = succ->right;
		else
			succ_p->right = succ->right;

		t->data = succ->data;

		t = succ;
	}
	free(t);
	return ;
}

void preorder(TreeNode *root) {
    if (root!=NULL) {
        int n = root->data;
        printf("%d ", n);
        preorder(root->left);
        preorder(root->right);
    }
}
int main() {
	TreeNode *n1;
    n1= (TreeNode *)malloc(sizeof(TreeNode));
    n1->data = 41;
    n1->left = NULL;
    n1->right = NULL;
 	insert_node(&n1, 20);
    insert_node(&n1, 72);
    insert_node(&n1, 11);
    insert_node(&n1, 29);
    insert_node(&n1, 32);
    insert_node(&n1, 50);
    insert_node(&n1, 45);
    insert_node(&n1, 51);
    insert_node(&n1, 91);
    insert_node(&n1, 90);
    insert_node(&n1, 99);
    preorder(n1);
    printf("\n");
    delete_node(&n1, 50);
    delete_node(&n1, 32);
    delete_node(&n1, 11);
    preorder(n1);
    printf("\n");
    return 0;
}