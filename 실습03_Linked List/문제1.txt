#include <stdio.h>
#include <stdlib.h>

typedef int element;
typedef struct ListNode {
    
    element data;
    struct ListNode *link;

} ListNode;

void insert_node(ListNode **phead, ListNode *p, ListNode *new_node) 
{
	if( *phead == NULL ){ // 공백리스트인 경우
		new_node->link = NULL;
		*phead = new_node;
	}
	else if( p == NULL ){ // p가 NULL이면 첫번째 노드로 삽입
		new_node->link = *phead;
		*phead = new_node;
	}
	else { // p 다음에 삽입
		new_node->link = p->link;
		p->link = new_node;
	}
}
 
void insert_node_after_value(ListNode *head, int value, ListNode *new_node) {
    ListNode *p;
    p=(ListNode *)malloc(sizeof(ListNode));
    p=head;
    while(p!=NULL){
       	if(p->data == value) { //값
           	new_node->link=p->link;
           	p->link=new_node;
           
           	return;
        }
        p=p->link;
    }
    printf("해당 숫자가 없음\n");
    
   
}
void remove_node_by_value(ListNode **phead, ListNode *head, int value) {
    ListNode *p;
    p=(ListNode *)malloc(sizeof(ListNode));
    if(head->data == value) { //값
       	*phead = head->link;
    }
    while(head!=NULL){
       	if(head->data==value) {     
        	p->link = head->link;
           	free(head);
           	return;
       }
        
       p=head;
       head=head->link;
    }
    printf("해당 숫자가 없음\n");
}

void remove_node(ListNode **phead, ListNode *p, ListNode *removed) 
	{
	if( p == NULL )
		*phead = (*phead)->link;
	else
		p->link = removed->link;
	free(removed);
	}
void display(ListNode *head) 
{
	ListNode *p=head;
	while( p != NULL ){
		printf("%d->", p->data);
		p = p->link;
	}
	printf("\n");
}
ListNode *concat(ListNode *head1, ListNode *head2) 
{
		ListNode *p;
		if( head1 == NULL ) return head2;
		else if( head2 == NULL ) return head1;
		else {
			p = head1;
			while( p->link != NULL )
				p = p->link;
			p->link = head2;
		return head1;
		}
}


int main(int argc, const char * argv[]) {

 struct ListNode *head1 = malloc(sizeof(struct ListNode));
 struct ListNode *head2 = malloc(sizeof(struct ListNode));
 struct ListNode *head3 = malloc(sizeof(struct ListNode));

 head1 = NULL;
 head2 = NULL;
 head3 = NULL;

 for (int i=1;i<=5;i++) {
  struct ListNode *new_node = malloc(sizeof(struct ListNode));
  new_node->link = NULL;
  new_node->data = i;
  insert_node(&head1, NULL, new_node);
 }
 for (int i=6;i<=10;i++) {
  struct ListNode *new_node = malloc(sizeof(struct ListNode));
  new_node->link = NULL;
  new_node->data = i;
  insert_node(&head2, NULL, new_node);
 }

 printf("링크드리스트1 전체출력\n");
 display(head1);
 printf("링크드리스트2 전체출력\n");
 display(head2);
 printf("링크드리스트 합치기\n");
 head3 = concat(head2, head1);
 display(head3);

 printf("새로운 노드 11을 4 뒤에 넣기\n");

 struct ListNode *new_node = malloc(sizeof(struct ListNode));
 new_node->link = NULL;
 new_node->data = 11;

 insert_node_after_value(head3,4, new_node);
 display(head3);

 printf("새로운 노드 11을 0 (없는값) 뒤에 넣기\n");

 struct ListNode *new_node2 = malloc(sizeof(struct ListNode));
 new_node2->link = NULL;
 new_node2->data = 11;

 insert_node_after_value(head3,0, new_node2);
 display(head3);

 printf("노드 11을 삭제하기\n");
 remove_node_by_value(&head3, head3, 11);
 display(head3);
 printf("노드 1을 삭제하기\n");
 remove_node_by_value(&head3, head3,1);
 display(head3);
 printf("노드 10을 삭제하기\n");
 remove_node_by_value(&head3, head3, 10);
 display(head3);
 printf("노드 1을 삭제하기\n");
 remove_node_by_value(&head3, head3,1);
 display(head3);



 return 0;
}