#include<stdio.h>
#include<stdlib.h>
typedef int element;
typedef struct StackNode {
	element item;
    struct StackNode *link;
} StackNode;

typedef struct {
	StackNode *top;
} LinkedStackType;

int is_empty(LinkedStackType *s) {
    return (s->top == NULL);
}
void push(LinkedStackType *s, element item) {
    StackNode *temp=(StackNode *)malloc(sizeof(StackNode));
    if( temp == NULL ){
        fprintf(stderr, "메모리 할당에러\n");
        return;
    }
    
    else{
        temp->item = item;
        temp->link = s->top;
        s->top = temp;
        printf("item %d push\n",item);
    }
}
element pop(LinkedStackType *s) {
    if( is_empty(s) ) {
		printf("스택이 비어있음\n");
		return -1;
	}
	else{
        if(s->top->link == NULL)
        {
           	
			StackNode *temp=s->top;
			element item = temp->item;
			s->top = NULL;
        
			free(temp);
			return item; 
        }
        
		StackNode *temp=s->top;
		element item = temp->item;
		s->top = s->top->link;
        
		free(temp);
		return item;
	}
}
void display(LinkedStackType *s) {
    if(s->top == NULL)
    {
		printf("[ EMPTY STACK ]\n");
        return;
    }
    StackNode *temp = s->top;
    printf("[  %d  ] ==> TOP\n",temp->item);
    temp = temp->link;
    while(temp !=NULL)
    {
        
            printf("[  %d  ]\n",temp->item);
        
        	temp = temp->link;
        	
    }
}
int main() {
	LinkedStackType *stack=(LinkedStackType *)malloc(sizeof(LinkedStackType));
	stack->top = NULL;

 	push(stack,1);
 	push(stack,2);
 	push(stack,3);
 	push(stack,4);
 	push(stack,5);
 	display(stack);
 	printf("pop item %d\n",pop(stack));
 	printf("pop item %d\n",pop(stack));
 	display(stack);
 	push(stack,5);
 	display(stack);
 	printf("pop item %d\n",pop(stack));
 	printf("pop item %d\n",pop(stack));
 	printf("pop item %d\n",pop(stack));
 	printf("pop item %d\n",pop(stack));
 	printf("pop item %d\n",pop(stack));
 	display(stack);
}