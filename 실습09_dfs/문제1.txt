#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct GraphType {
    int v;
    int *visited;
    int **adj_mat;
} GraphType;
    
GraphType *create_graph(int vertexCount)
{
	int i;

	GraphType *graph = (GraphType *)malloc(sizeof(GraphType) * vertexCount);
	graph->visited = (int *)malloc(sizeof(int *) * vertexCount);
	graph->adj_mat = (int **)malloc(sizeof(int *) * vertexCount);
	
	graph->v = vertexCount;
	
	for (i = 0; i < vertexCount; i++) {
		graph->adj_mat[i] = (int *)malloc(sizeof(int) * vertexCount);
		memset(graph->adj_mat[i], 0, sizeof(int) * vertexCount);
	}
	return graph;
}

void insert_edge(GraphType *g, int u, int v)
{
	g->adj_mat[u][v] = 1;
	g->adj_mat[v][u] = 1;
}

void printGraph(GraphType *g)
{
	int i, j;

	for (i = 0; i < g->v; i++) {
		printf("start %d ->", i);
		for (j = 0; j < g->v; j++) {
			printf("%d ", g->adj_mat[i][j]);
		}
		printf("\n");
	}
}

void dfs_mat(GraphType *g, int n)
{
	int w;
	g->visited[n] = 1; // 정점 v의 방문 표시
	printf("%d ", n); // 방문한 정점 출력
	for(w=0; w<g->v; w++) // 인접 정점 탐색
		if( g->adj_mat[n][w] && !g->visited[w] ) {
            dfs_mat(g, w); //정점 w에서 DFS 새로시작
        }
}

int main(void)
{
    
	GraphType *g;
	g = create_graph(5);

	insert_edge(g, 0, 1);
	insert_edge(g, 0, 2);
	insert_edge(g, 0, 4);
	insert_edge(g, 1, 2);
	insert_edge(g, 2, 3);
	insert_edge(g, 2, 4);
	insert_edge(g, 3, 4);
    printGraph(g);
	dfs_mat(g,0);

	return 0;
}